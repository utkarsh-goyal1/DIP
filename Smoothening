//Average Filter
img = imread('cameraman.tif');
[rows, columns] = size(img);

subplot(1, 2, 1);
imshow(img);
title('Original Image');

m = [1/9,1/9,1/9;1/9,1/9,1/9;1/9,1/9,1/9];
resultImg = zeros(rows, columns); % Initialize the result image

for x = 2:rows-1
    for y = 2:columns-1
        % Perform average filter manually
        resultImg(x, y) = m(1,1)*img(x-1,y-1) + m(1,2)*img(x-1,y) + m(1,3)*img(x-1,y+1) + ...
                          m(2,1)*img(x,y-1)   + m(2,2)*img(x,y)   + m(2,3)*img(x,y+1)   + ...
                          m(3,1)*img(x+1,y-1) + m(3,2)*img(x+1,y) + m(3,3)*img(x+1,y+1);
    end
end

% Show the resulting image after manual convolution
subplot(1, 2, 2);
imshow(uint8(resultImg)); % Convert back to uint8 for displaying
title('Result after Average Filter');

//Weighted average filter
img = imread('cameraman.tif');
[rows, columns] = size(img);

subplot(1, 2, 1);
imshow(img);
title('Original Image');

m = [1/16,2/16,1/16;2/16,4/16,2/16;1/16,2/16,1/16];
resultImg = zeros(rows, columns); % Initialize the result image

for x = 2:rows-1
    for y = 2:columns-1
        % Perform average filter manually
        resultImg(x, y) = m(1,1)*img(x-1,y-1) + m(1,2)*img(x-1,y) + m(1,3)*img(x-1,y+1) + ...
                          m(2,1)*img(x,y-1)   + m(2,2)*img(x,y)   + m(2,3)*img(x,y+1)   + ...
                          m(3,1)*img(x+1,y-1) + m(3,2)*img(x+1,y) + m(3,3)*img(x+1,y+1);
    end
end

% Show the resulting image after manual convolution
subplot(1, 2, 2);
imshow(uint8(resultImg)); % Convert back to uint8 for displaying
title('Result after Weighted Average Filter');


//min filter
img = imread('cameraman.tif');
[rows, columns] = size(img);

subplot(1, 2, 1);
imshow(img);
title('Original Image');

minResultImg = zeros(rows, columns); % Initialize the result image for min filter

for x = 2:rows-1
    for y = 2:columns-1
        neighborhood = [img(x-1, y-1), img(x-1, y), img(x-1, y+1);
                        img(x, y-1), img(x, y), img(x, y+1);
                        img(x+1, y-1), img(x+1, y), img(x+1, y+1)];
        minResultImg(x, y) = min(neighborhood(:));
    end
end


% Show the resulting image after manual convolution
subplot(1, 2, 2);
imshow(uint8(minResultImg)); % Convert back to uint8 for displaying
title('Result after min Filter');

//max filter
img = imread('cameraman.tif');
[rows, columns] = size(img);

subplot(1, 2, 1);
imshow(img);
title('Original Image');

maxResultImg = zeros(rows, columns); % Initialize the result image for min filter

for x = 2:rows-1
    for y = 2:columns-1
        neighborhood = [img(x-1, y-1), img(x-1, y), img(x-1, y+1);
                        img(x, y-1), img(x, y), img(x, y+1);
                        img(x+1, y-1), img(x+1, y), img(x+1, y+1)];
        maxResultImg(x, y) = max(neighborhood(:));
    end
end


% Show the resulting image after manual convolution
subplot(1, 2, 2);
imshow(uint8(maxResultImg)); % Convert back to uint8 for displaying
title('Result after max Filter');


//median filter

img = imread('cameraman.tif');
[rows, columns] = size(img);

subplot(1, 2, 1);
imshow(img);
title('Original Image');

medianResultImg = zeros(rows, columns); % Initialize the result image for median filter

for x = 2:rows-1
    for y = 2:columns-1
        neighborhood = [img(x-1, y-1), img(x-1, y), img(x-1, y+1);
                        img(x, y-1), img(x, y), img(x, y+1);
                        img(x+1, y-1), img(x+1, y), img(x+1, y+1)];
        medianResultImg(x, y) = median(neighborhood(:));
    end
end


% Show the resulting image after manual convolution
subplot(1, 2, 2);
imshow(uint8(medianResultImg)); % Convert back to uint8 for displaying
title('Result after median Filter');

